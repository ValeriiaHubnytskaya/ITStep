1. Результатом компиляции файла являеться exe или dll (зависит от настроек), что называеться СБОРКА приложения
СБОРКА - это логическая единица, содержащая скомпилированный код для .NET. 
Сборка сосотоит из:
 - манифеста (содержит методанные)
 - методанные типов (так определяеться местонахождения типов в файле и их место в памяти)
 - CIL Код (Common Intermidiate Language)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
сборка (assembly) — это логическая единица, содержащая скомпилированный код для .NET Framework, т.е. это полностью самодостаточный и скорее логический, 
нежели физический элемент. Это значит, что он может быть сохранен в более чем одном
 файле (хотя динамические сборки хранятся в памяти, а вовсе не в файлах). Если сборка хранится в более чем одном файле, 
то должен существовать один главный файл, содержащий точку входа и описывающий остальные файлы.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Следует отметить, что одна и та же структура сборки используется как для исполняемого кода, 
так и для кода библиотек. Единственное реальное отличие исполняемой сборки заключается в том, что она содержит главную точку входа программы, 
тогда как библиотечная сборка — нет.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
спецификаторы доступа:
public - доступно везде и всюду
internal - доступ только в сборке
protected - доступ в классе и наследникам 
protected internal - доступ в классе и наследникам с видимостью ограниченной сборкой
private - доступно только в классе
--------------------------------------------------------------------------------------------------------------------------------------------------------------
LINQ (Language-Integrated Query) представляет простой и удобный язык запросов к источнику данных.
 В качестве источника данных может выступать объект, реализующий интерфейс IEnumerable (например, стандартные коллекции, массивы)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
SOLID
S - Single Responsibility Principle
O - Open Closet Principle (открыт к расширению, закрыт к изменению)
L - Liskov Substitution Principle (объекты в программе должны быть заменяемыми на экземпляры их подтипов
без изменения правильности выполнения программы)
I - Interface Segregation Principle
D - Dependency Inversion Principle

1. S - каждый объект должен иметь свою обязанность и эта обязанность должна быть инкапсулирована в класс.
Т.е. не делать God class.
2. O - открыт к расширению, закрыт к изменению. Клиентский код зависит от неизменного интерфейса
3. L - наследник класса родителя может заместить родтеля без проблем
4. I - программные сущности недолжны зависить от методов, которые они не используют.
5. D - Модули высокого уровня не должны зависеть от модулей нижнего уровня.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Предикат - объект функция
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Entity Framework
- технология доступа к данным
- основана на object relation mapping 